<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Murk.Command.BaseClasses</name>
    </assembly>
    <members>
        <member name="T:Murk.Command.BaseCommand">
            <summary>
            Base class for commands.
            </summary>
        </member>
        <member name="M:Murk.Command.BaseCommand.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.BaseCommand`1">
            <summary>
            Base class for generic commands.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.BaseCommand`1.Execute(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.BaseCommandAsync">
            <summary>
            Base class for async commands.
            </summary>
        </member>
        <member name="M:Murk.Command.BaseCommandAsync.ExecuteAsync(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.BaseCommandAsync`1">
            <summary>
            Base class for generic async commands.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.BaseCommandAsync`1.ExecuteAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.BaseCommandDisableAble">
            <summary>
            Base class for disable able commands.
            Implements <see cref="T:System.Windows.Input.ICommand" />.
            </summary>
        </member>
        <member name="T:Murk.Command.BaseCommandDisableAble`1">
            <summary>
            Base class for disable able generic commands.
            Implements <see cref="T:System.Windows.Input.ICommand" />.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.BaseCommandDisableAble`1.CanExecute(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.BaseCommandDisableAble`1.Execute(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.BaseCommandDisableAble`1.CanExecute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
        </member>
        <member name="M:Murk.Command.BaseCommandDisableAble`1.Execute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
        </member>
        <member name="T:Murk.Command.BaseCommandDisableAbleAsync">
            <summary>
            Base class for disable able async commands.
            Implements <see cref="T:System.Windows.Input.ICommand" />.
            </summary>
        </member>
        <member name="M:Murk.Command.BaseCommandDisableAbleAsync.CanExecuteAsync(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.BaseCommandDisableAbleAsync.ExecuteAsync(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.BaseCommandDisableAbleAsync.CanExecute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
        </member>
        <member name="M:Murk.Command.BaseCommandDisableAbleAsync.Execute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
        </member>
        <member name="T:Murk.Command.BaseCommandDisableAbleAsync`1">
            <summary>
            Base class for generic disable able async commands.
            Implements <see cref="T:System.Windows.Input.ICommand" />.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.BaseCommandDisableAbleAsync`1.CanExecuteAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.BaseCommandDisableAbleAsync`1.ExecuteAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.BaseCommandDisableAbleAsync`1.CanExecute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
        </member>
        <member name="M:Murk.Command.BaseCommandDisableAbleAsync`1.Execute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
        </member>
        <member name="T:Murk.Command.BaseCommandReversible">
            <summary>
            Base class for reversible commands.
            </summary>
        </member>
        <member name="M:Murk.Command.BaseCommandReversible.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.BaseCommandReversible.Reverse(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.BaseCommandReversible`1">
            <summary>
            Base class for reversible generic commands.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.BaseCommandReversible`1.Execute(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.BaseCommandReversible`1.Reverse(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.BaseCommandReversibleAndDisableAble">
            <summary>
            Base class for reversible and disposable commands.
            Implements <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
        </member>
        <member name="M:Murk.Command.BaseCommandReversibleAndDisableAble.Reverse(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.BaseCommandReversibleAndDisableAble`1">
            <summary>
            Base class for reversible and disposable commands.
            Implements <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.BaseCommandReversibleAndDisableAble`1.Reverse(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.BaseCommandReversibleAndDisableAbleAsync">
            <summary>
            Base class for reversible and disposable async commands.
            Implements <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
        </member>
        <member name="M:Murk.Command.BaseCommandReversibleAndDisableAbleAsync.ReverseAsync(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.BaseCommandReversibleAndDisableAbleAsync`1">
            <summary>
            Base class for reversible and disposable async commands.
            Implements <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.BaseCommandReversibleAndDisableAbleAsync`1.ReverseAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.BaseCommandReversibleAsync">
            <summary>
            Base class for async reversible commands.
            </summary>
        </member>
        <member name="M:Murk.Command.BaseCommandReversibleAsync.ExecuteAsync(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.BaseCommandReversibleAsync.ReverseAsync(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.BaseCommandReversibleAsync`1">
            <summary>
            Base class for async reversible generic commands.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.BaseCommandReversibleAsync`1.ExecuteAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.BaseCommandReversibleAsync`1.ReverseAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommand">
            <summary>
            Base class for disposable multi parameters command.
            </summary>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommand.Execute(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommand`1">
            <summary>
            Base class for generic multi parameters command.
            </summary>
            <typeparam name="T">Parameters type.</typeparam>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommand`1.Execute(`0[])">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandAsync">
            <summary>
            Base class for async multi parameters command.
            </summary>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandAsync.ExecuteAsync(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandAsync`1">
            <summary>
            Base class for async generic multi parameters command.
            </summary>
            <typeparam name="T">Parameters type.</typeparam>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandAsync`1.ExecuteAsync(`0[])">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandDisableAble">
            <summary>
            Base class for disposable multi parameter commands.
            Implements <see cref="T:System.Windows.Input.ICommand" />.
            </summary>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAble.CanExecute(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAble.Execute(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAble.CanExecute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAble.Execute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandDisableAble`1">
            <summary>
            Base class for generic multi parameter commands.
            Implements <see cref="T:System.Windows.Input.ICommand" />.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAble`1.CanExecute(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAble`1.Execute(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAble`1.CanExecute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAble`1.Execute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandDisableAbleAsync">
            <summary>
            Base class for async commands.
            Implements <see cref="T:System.Windows.Input.ICommand" />.
            </summary>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAbleAsync.CanExecuteAsync(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAbleAsync.ExecuteAsync(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAbleAsync.CanExecute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAbleAsync.Execute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandDisableAbleAsync`1">
            <summary>
            Base class for async generic commands.
            Implements <see cref="T:System.Windows.Input.ICommand" />.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAbleAsync`1.CanExecuteAsync(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAbleAsync`1.ExecuteAsync(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAbleAsync`1.CanExecute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandDisableAbleAsync`1.Execute(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.InvalidCastException" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandReversible">
            <summary>
            Base class for reversible multi parameter commands.
            </summary>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandReversible.Execute(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandReversible.Reverse(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandReversible`1">
            <summary>
            Base class for reversible multi parameter generic commands.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandReversible`1.Execute(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandReversible`1.Reverse(`0[])">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandReversibleAndDisableAble">
            <summary>
            Base class for reversible and disposable commands.
            Implements <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandReversibleAndDisableAble.Reverse(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandReversibleAndDisableAble`1">
            <summary>
            Base class for reversible and disposable commands.
            Implements <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandReversibleAndDisableAble`1.Reverse(`0[])">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandReversibleAndDisableAbleAsync">
            <summary>
            Base class for reversible and disposable async commands.
            Implements <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandReversibleAndDisableAbleAsync.ReverseAsync(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandReversibleAndDisableAbleAsync`1">
            <summary>
            Base class for reversible and disposable async commands.
            Implements <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandReversibleAndDisableAbleAsync`1.ReverseAsync(`0[])">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandReversibleAsync">
            <summary>
            Base class for async reversible commands.
            </summary>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandReversibleAsync.ExecuteAsync(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandReversibleAsync.ReverseAsync(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.MultiParameters.BaseCommandReversibleAsync`1">
            <summary>
            Base class for async reversible generic commands.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandReversibleAsync`1.ExecuteAsync(`0[])">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.MultiParameters.BaseCommandReversibleAsync`1.ReverseAsync(`0[])">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.Parameterless.BaseCommand">
            <summary>
            Base class for parameterless commands.
            </summary>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommand.Execute">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.Parameterless.BaseCommandAsync">
            <summary>
            Base class for parameterless async commands.
            </summary>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandAsync.ExecuteAsync">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.Parameterless.BaseCommandDisableAble">
            <summary>
            Base class for disable able commands.
            Implements <see cref="T:System.Windows.Input.ICommand" />.
            </summary>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandDisableAble.CanExecute">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandDisableAble.Execute">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandDisableAble.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandDisableAble.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.Parameterless.BaseCommandDisableAbleAsync">
            <summary>
            Base class for parameterless async  commands.
            Implements <see cref="T:System.Windows.Input.ICommand" />.
            </summary>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandDisableAbleAsync.CanExecuteAsync">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandDisableAbleAsync.ExecuteAsync">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandDisableAbleAsync.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandDisableAbleAsync.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.Parameterless.BaseCommandReversible">
            <summary>
            Base class for reversible commands.
            </summary>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandReversible.Execute">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandReversible.Reverse">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.Parameterless.BaseCommandReversibleAndDisableAble">
            <summary>
            Base class for reversible and disposable commands.
            Implements <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandReversibleAndDisableAble.Reverse">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.Parameterless.BaseCommandReversibleAndDisableAbleAsync">
            <summary>
            Base class for parameterless reversible and disable able
            async commands.
            Implements <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandReversibleAndDisableAbleAsync.ReverseAsync">
            <inheritdoc/>
        </member>
        <member name="T:Murk.Command.Parameterless.BaseCommandReversibleAsync">
            <summary>
            Base class for parameterless reversible async commands.
            </summary>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandReversibleAsync.ExecuteAsync">
            <inheritdoc/>
        </member>
        <member name="M:Murk.Command.Parameterless.BaseCommandReversibleAsync.ReverseAsync">
            <inheritdoc/>
        </member>
    </members>
</doc>
