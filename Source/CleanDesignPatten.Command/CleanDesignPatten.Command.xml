<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CleanDesignPatterns.Command.Interfaces</name>
    </assembly>
    <members>
        <member name="T:CleanDesignPatterns.Command.Generic.ICommand`1">
            <summary>
            A generic interface that represents a simple Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.Generic.ICommand`1.Execute(`0)">
            <summary>
            The main command concern to be executed when needed.
            </summary>
            <param name="parameter">Command parameter.</param>
        </member>
        <member name="T:CleanDesignPatterns.Command.Generic.ICommandAsync`1">
            <summary>
            A generic interface that represents a async Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.Generic.ICommandAsync`1.Execute(`0)">
            <summary>
            The main command concern to be executed when needed.
            </summary>
            <param name="parameter">Command parameter.</param>
        </member>
        <member name="T:CleanDesignPatterns.Command.Generic.ICommandDisableAble`1">
            <summary>
            A generic interface that represents a disable able command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.Generic.ICommandDisableAble`1.CanExecute(`0)">
            <summary>
            Determinate whether or not the command can be executed.
            </summary>
            <param name="parameter">Command parameter.</param>
            <returns>True/False</returns>
        </member>
        <member name="T:CleanDesignPatterns.Command.Generic.ICommandDisableAbleAsync`1">
            <summary>
            A generic interface that represents a async
            disable able command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.Generic.ICommandDisableAbleAsync`1.CanExecute(`0)">
            <summary>
            Determinate whether or not the command can be executed.
            </summary>
            <param name="parameter">Command parameter.</param>
            <returns>True/False</returns>
        </member>
        <member name="T:CleanDesignPatterns.Command.Generic.ICommandReversible`1">
            <summary>
            A generic interface that represents a reversible Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.Generic.ICommandReversible`1.Reverse(`0)">
            <summary>
            The undo command operation.
            </summary>
            <param name="parameter">Command parameter.</param>
        </member>
        <member name="T:CleanDesignPatterns.Command.Generic.ICommandReversibleAndDisableAble`1">
            <summary>
            A generic interface that represents a reversible
            and disable able Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="T:CleanDesignPatterns.Command.Generic.ICommandReversibleAndDisableAbleAsync`1">
            <summary>
            A generic interface that represents a async reversible
            and disable able Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="T:CleanDesignPatterns.Command.Generic.ICommandReversibleAsync`1">
            <summary>
            A generic interface that represents a async reversible
            Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.Generic.ICommandReversibleAsync`1.Reverse(`0)">
            <summary>
            The undo command operation.
            </summary>
            <param name="parameter">Command parameter.</param>
        </member>
        <member name="T:CleanDesignPatterns.Command.ICommand">
            <summary>
            A disposable Command that implements
            <see cref="T:System.Windows.Input.ICommand" />.
            </summary>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommand">
            <summary>
            A interface that represents a multi parameter command.
            </summary>
        </member>
        <member name="M:CleanDesignPatterns.Command.MultiParameters.ICommand.Execute(System.Object[])">
            <summary>
            The main command concern to be executed when needed.
            </summary>
            <param name="parameters">Command parameters.</param>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommand`1">
            <summary>
            A generic interface that represents a multi parameter command.
            </summary>
            <typeparam name="T">Parameters type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.MultiParameters.ICommand`1.Execute(`0[])">
            <summary>
            The main command concern to be executed when needed.
            </summary>
            <param name="parameters">Command parameters.</param>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandAsync">
            <summary>
            A generic interface that represents a async Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.MultiParameters.ICommandAsync.Execute(System.Object[])">
            <summary>
            The main command concern to be executed when needed.
            </summary>
            <param name="parameter">Command parameter.</param>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandAsync`1">
            <summary>
            A generic interface that represents a async
            multi parameter command.
            </summary>
            <typeparam name="T">Parameters type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.MultiParameters.ICommandAsync`1.Execute(`0[])">
            <summary>
            The main command concern to be executed when needed.
            </summary>
            <param name="parameters">Command parameters.</param>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandDisableAble">
            <summary>
            A interface that represents a disable able command.
            </summary>
        </member>
        <member name="M:CleanDesignPatterns.Command.MultiParameters.ICommandDisableAble.CanExecute(System.Object[])">
            <summary>
            Determinate whether or not the command can be executed.
            </summary>
            <param name="parameters">Command parameter.</param>
            <returns>True/False</returns>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandDisableAble`1">
            <summary>
            A generic interface that represents a disable able command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.MultiParameters.ICommandDisableAble`1.CanExecute(`0[])">
            <summary>
            Determinate whether or not the command can be executed.
            </summary>
            <param name="parameters">Command parameter.</param>
            <returns>True/False</returns>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandDisableAbleAsync">
            <summary>
            A interface that represents a async
            disable able command.
            </summary>
        </member>
        <member name="M:CleanDesignPatterns.Command.MultiParameters.ICommandDisableAbleAsync.CanExecute(System.Object[])">
            <summary>
            Determinate whether or not the command can be executed.
            </summary>
            <param name="parameters">Command parameter.</param>
            <returns>True/False</returns>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandDisableAbleAsync`1">
            <summary>
            A generic interface that represents a async
            disable able command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.MultiParameters.ICommandDisableAbleAsync`1.CanExecute(`0[])">
            <summary>
            Determinate whether or not the command can be executed.
            </summary>
            <param name="parameters">Command parameter.</param>
            <returns>True/False</returns>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandReversible">
            <summary>
            A interface that represents a reversible Command.
            </summary>
        </member>
        <member name="M:CleanDesignPatterns.Command.MultiParameters.ICommandReversible.Reverse(System.Object[])">
            <summary>
            The undo command operation.
            </summary>
            <param name="parameters">Command parameter.</param>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandReversible`1">
            <summary>
            A generic interface that represents a reversible Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.MultiParameters.ICommandReversible`1.Reverse(`0[])">
            <summary>
            The undo command operation.
            </summary>
            <param name="parameters">Command parameter.</param>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandReversibleAndDisableAble">
            <summary>
            A interface that represents a reversible
            and disable able Command.
            </summary>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandReversibleAndDisableAble`1">
            <summary>
            A generic interface that represents a reversible
            and disable able Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandReversibleAndDisableAbleAsync">
            <summary>
            A interface that represents a async reversible
            and disable able Command.
            </summary>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandReversibleAndDisableAbleAsync`1">
            <summary>
            A generic interface that represents a async reversible
            and disable able Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandReversibleAsync">
            <summary>
            A interface that represents a async reversible
            Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.MultiParameters.ICommandReversibleAsync.Reverse(System.Object[])">
            <summary>
            The undo command operation.
            </summary>
            <param name="parameters">Command parameter.</param>
        </member>
        <member name="T:CleanDesignPatterns.Command.MultiParameters.ICommandReversibleAsync`1">
            <summary>
            A generic interface that represents a async reversible
            Command.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
        </member>
        <member name="M:CleanDesignPatterns.Command.MultiParameters.ICommandReversibleAsync`1.Reverse(`0[])">
            <summary>
            The undo command operation.
            </summary>
            <param name="parameters">Command parameter.</param>
        </member>
        <member name="T:CleanDesignPatterns.Command.Parameterless.ICommand">
            <summary>
            A interface that represents a simple Command.
            </summary>
        </member>
        <member name="M:CleanDesignPatterns.Command.Parameterless.ICommand.Execute">
            <summary>
            The main command concern to be executed when needed.
            </summary>
        </member>
        <member name="T:CleanDesignPatterns.Command.Parameterless.ICommandAsync">
            <summary>
            A generic interface that represents a async Command.
            </summary>
        </member>
        <member name="M:CleanDesignPatterns.Command.Parameterless.ICommandAsync.Execute">
            <summary>
            The main command concern to be executed when needed.
            </summary>
        </member>
        <member name="T:CleanDesignPatterns.Command.Parameterless.ICommandDisableAble">
            <summary>
            A interface that represents a disable able command.
            </summary>
        </member>
        <member name="M:CleanDesignPatterns.Command.Parameterless.ICommandDisableAble.CanExecute">
            <summary>
            Determinate whether or not the command can be executed.
            </summary>
            <returns>True/False</returns>
        </member>
        <member name="T:CleanDesignPatterns.Command.Parameterless.ICommandDisableAbleAsync">
            <summary>
            A interface that represents a async disable able command.
            </summary>
        </member>
        <member name="M:CleanDesignPatterns.Command.Parameterless.ICommandDisableAbleAsync.CanExecute">
            <summary>
            Determinate whether or not the command can be executed.
            </summary>
            <returns>True/False</returns>
        </member>
        <member name="T:CleanDesignPatterns.Command.Parameterless.ICommandReversible">
            <summary>
            A interface that represents a reversible Command.
            </summary>
        </member>
        <member name="M:CleanDesignPatterns.Command.Parameterless.ICommandReversible.Reverse">
            <summary>
            The undo command operation.
            </summary>
        </member>
        <member name="T:CleanDesignPatterns.Command.Parameterless.ICommandReversibleAndDisableAble">
            <summary>
            A interface for Commands that can be disable and reverse.
            </summary>
        </member>
        <member name="T:CleanDesignPatterns.Command.Parameterless.ICommandReversibleAndDisableAbleAsync">
            <summary>
            A interface that represents a async reversible
            and disable able Command.
            </summary>
        </member>
        <member name="T:CleanDesignPatterns.Command.Parameterless.ICommandReversibleAsync">
            <summary>
            A interface that represents a async reversible command.
            </summary>
        </member>
        <member name="M:CleanDesignPatterns.Command.Parameterless.ICommandReversibleAsync.Reverse">
            <summary>
            The undo command operation.
            </summary>
        </member>
    </members>
</doc>
